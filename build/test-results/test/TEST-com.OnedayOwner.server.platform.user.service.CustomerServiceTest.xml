<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.OnedayOwner.server.platform.user.service.CustomerServiceTest" tests="2" skipped="0" failures="0" errors="0" timestamp="2024-04-10T15:45:45" hostname="DESKTOP-PGD89KD" time="1.466">
  <properties/>
  <testcase name="로그인()" classname="com.OnedayOwner.server.platform.user.service.CustomerServiceTest" time="1.447"/>
  <testcase name="회원가입()" classname="com.OnedayOwner.server.platform.user.service.CustomerServiceTest" time="0.016"/>
  <system-out><![CDATA[00:45:35.959 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.OnedayOwner.server.platform.user.service.CustomerServiceTest]: CustomerServiceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
00:45:36.349 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.OnedayOwner.server.OnedayOwnerServerApplication for test class com.OnedayOwner.server.platform.user.service.CustomerServiceTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.4)

2024-04-11T00:45:37.251+09:00  INFO 3088 --- [    Test worker] c.O.s.p.u.service.CustomerServiceTest    : Starting CustomerServiceTest using Java 17.0.8 with PID 3088 (started by 529ac in C:\Users\529ac\Desktop\Toy Project\OnedayOwner-back)
2024-04-11T00:45:37.256+09:00  INFO 3088 --- [    Test worker] c.O.s.p.u.service.CustomerServiceTest    : No active profile set, falling back to 1 default profile: "default"
2024-04-11T00:45:38.739+09:00  INFO 3088 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-04-11T00:45:38.945+09:00  INFO 3088 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 185 ms. Found 1 JPA repository interface.
2024-04-11T00:45:39.921+09:00  INFO 3088 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-04-11T00:45:40.066+09:00  INFO 3088 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2024-04-11T00:45:40.179+09:00  INFO 3088 --- [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-04-11T00:45:40.807+09:00  INFO 3088 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-04-11T00:45:40.875+09:00  INFO 3088 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-04-11T00:45:41.018+09:00  INFO 3088 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:tcp://localhost/~/test user=SA
2024-04-11T00:45:41.021+09:00  INFO 3088 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-04-11T00:45:41.071+09:00  WARN 3088 --- [    Test worker] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2024-04-11T00:45:43.188+09:00  INFO 3088 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists customer cascade 
Hibernate: 
    drop table if exists feedback cascade 
Hibernate: 
    drop table if exists menu cascade 
Hibernate: 
    drop table if exists owner cascade 
Hibernate: 
    drop table if exists place_description cascade 
Hibernate: 
    drop table if exists place_info cascade 
Hibernate: 
    drop table if exists place_post cascade 
Hibernate: 
    drop table if exists place_provider cascade 
Hibernate: 
    drop table if exists popup_restaurant cascade 
Hibernate: 
    drop table if exists reservation cascade 
Hibernate: 
    drop table if exists reservation_menu cascade 
Hibernate: 
    drop sequence if exists reservation_seq
Hibernate: 
    create sequence reservation_seq start with 1 increment by 50
Hibernate: 
    create table customer (
        birth date,
        point integer not null,
        created_date_time timestamp(6),
        customer_id bigint generated by default as identity,
        last_modified_date_time timestamp(6),
        email varchar(255),
        gender varchar(255) check (gender in ('MALE','FEMALE')),
        name varchar(255),
        password varchar(255),
        phone_number varchar(255),
        primary key (customer_id)
    )
Hibernate: 
    create table feedback (
        desired_price integer not null,
        show boolean,
        customer_id bigint,
        feedback_id bigint generated by default as identity,
        menu_id bigint,
        feedback varchar(255),
        score varchar(255),
        primary key (feedback_id)
    )
Hibernate: 
    create table menu (
        price integer not null,
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        menu_id bigint generated by default as identity,
        popup_restaurant_id bigint,
        description varchar(255),
        name varchar(255),
        primary key (menu_id)
    )
Hibernate: 
    create table owner (
        birth date,
        gender tinyint check (gender between 0 and 1),
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        owner_id bigint generated by default as identity,
        email varchar(255),
        name varchar(255),
        password varchar(255),
        phone_number varchar(255),
        primary key (owner_id)
    )
Hibernate: 
    create table place_description (
        end_date date,
        maximum_number_of_people integer not null,
        price integer not null,
        size integer not null,
        start_date date,
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        place_description_id bigint generated by default as identity,
        description varchar(255),
        name varchar(255),
        primary key (place_description_id)
    )
Hibernate: 
    create table place_info (
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        place_id bigint generated by default as identity,
        city varchar(255),
        street varchar(255),
        zipcode varchar(255),
        primary key (place_id)
    )
Hibernate: 
    create table place_post (
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        place_description_id bigint unique,
        place_info_id bigint unique,
        place_post_id bigint generated by default as identity,
        place_provider_id bigint,
        primary key (place_post_id)
    )
Hibernate: 
    create table place_provider (
        birth date,
        gender tinyint check (gender between 0 and 1),
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        place_provider_id bigint generated by default as identity,
        email varchar(255),
        name varchar(255),
        password varchar(255),
        phone_number varchar(255),
        primary key (place_provider_id)
    )
Hibernate: 
    create table popup_restaurant (
        end_date date,
        start_date date,
        created_date_time timestamp(6),
        last_modified_date_time timestamp(6),
        owner_id bigint,
        place_info_id bigint unique,
        popup_restaurant_id bigint generated by default as identity,
        name varchar(255),
        primary key (popup_restaurant_id)
    )
Hibernate: 
    create table reservation (
        number_of_people integer not null,
        customer_id bigint,
        popup_restaurant_id bigint,
        reservation_id bigint not null,
        reservation_time timestamp(6),
        primary key (reservation_id)
    )
Hibernate: 
    create table reservation_menu (
        quantity integer not null,
        menu_id bigint,
        reservation_id bigint,
        reservation_menu_id bigint generated by default as identity,
        primary key (reservation_menu_id)
    )
Hibernate: 
    alter table if exists feedback 
       add constraint FKpi2y2j7n01ypo49fone3knjry 
       foreign key (customer_id) 
       references customer
Hibernate: 
    alter table if exists feedback 
       add constraint FKtp3sx7c7gkpinsn3l5ytnlii7 
       foreign key (menu_id) 
       references menu
Hibernate: 
    alter table if exists menu 
       add constraint FKmaweor4ughfikuewqibmyhy5s 
       foreign key (popup_restaurant_id) 
       references popup_restaurant
Hibernate: 
    alter table if exists place_post 
       add constraint FKm07bo1kw1vje1ejulhnsko4ys 
       foreign key (place_description_id) 
       references place_description
Hibernate: 
    alter table if exists place_post 
       add constraint FKpkeympmk6sispnq92eni9lvwx 
       foreign key (place_info_id) 
       references place_info
Hibernate: 
    alter table if exists place_post 
       add constraint FKoxjda62g6fv52olcwcfhgvd07 
       foreign key (place_provider_id) 
       references place_provider
Hibernate: 
    alter table if exists popup_restaurant 
       add constraint FKvkrqghqncdfngmplbl3912hf 
       foreign key (owner_id) 
       references owner
Hibernate: 
    alter table if exists popup_restaurant 
       add constraint FKfmy0xkc4puqehh0c8be8ann1 
       foreign key (place_info_id) 
       references place_info
Hibernate: 
    alter table if exists reservation 
       add constraint FK41v6ueo0hiran65w8y1cta2c2 
       foreign key (customer_id) 
       references customer
Hibernate: 
    alter table if exists reservation 
       add constraint FKhg2qvgc3c1hjliw2p661cl9sv 
       foreign key (popup_restaurant_id) 
       references popup_restaurant
Hibernate: 
    alter table if exists reservation_menu 
       add constraint FK6ie10vjca5yk9yo79i8fhi331 
       foreign key (menu_id) 
       references menu
Hibernate: 
    alter table if exists reservation_menu 
       add constraint FK6m8t814b7jj5vst549hnp9lpd 
       foreign key (reservation_id) 
       references reservation
2024-04-11T00:45:43.394+09:00  INFO 3088 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-04-11T00:45:44.498+09:00  WARN 3088 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-04-11T00:45:45.337+09:00  INFO 3088 --- [    Test worker] c.O.s.p.u.service.CustomerServiceTest    : Started CustomerServiceTest in 8.637 seconds (process running for 11.297)
Hibernate: 
    insert 
    into
        customer
        (birth, created_date_time, email, gender, last_modified_date_time, name, password, phone_number, point, customer_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.birth,
        c1_0.created_date_time,
        c1_0.email,
        c1_0.gender,
        c1_0.last_modified_date_time,
        c1_0.name,
        c1_0.password,
        c1_0.phone_number,
        c1_0.point 
    from
        customer c1_0 
    where
        c1_0.email=?
Hibernate: 
    insert 
    into
        customer
        (birth, created_date_time, email, gender, last_modified_date_time, name, password, phone_number, point, customer_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.customer_id,
        c1_0.birth,
        c1_0.created_date_time,
        c1_0.email,
        c1_0.gender,
        c1_0.last_modified_date_time,
        c1_0.name,
        c1_0.password,
        c1_0.phone_number,
        c1_0.point 
    from
        customer c1_0 
    where
        c1_0.email=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
